linklist 

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *head = NULL; // Initially, the linked list is empty

void insert(int);
void delete(int);
void display();

int main() {
    int choice, element;

    while (1) {
        printf("\nMenu:");
        printf("\n1. Insert an element");
        printf("\n2. Delete an element");
        printf("\n3. Display the elements");
        printf("\n4. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter the element to insert: ");
                scanf("%d", &element);
                insert(element);
                break;
            case 2:
                printf("\nEnter the element to delete: ");
                scanf("%d", &element);
                delete(element);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void insert(int element) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("\nMemory allocation failed. Insertion failed.");
        return;
    }
    newNode->data = element;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    printf("\nElement %d inserted successfully.", element);
}

void delete(int element) {
    if (head == NULL) {
        printf("\nLinked list is empty. Deletion failed.");
        return;
    }

    Node *temp = head;
    Node *prev = NULL;

    if (temp->data == element) {
        head = temp->next;
        free(temp);
        printf("\nElement %d deleted successfully.", element);
        return;
    }

    while (temp != NULL && temp->data != element) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("\nElement %d not found in the linked list. Deletion failed.", element);
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("\nElement %d deleted successfully.", element);
}

void display() {
    if (head == NULL) {
        printf("\nLinked list is empty.");
        return;
    }

    printf("\nElements in the linked list: ");
    Node *temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
}

doubly

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
};

typedef struct Node Node;

Node *head = NULL; // Initially, the doubly linked list is empty

void insert(int);
void delete(int);
void display();

int main() {
    int choice, element;

    while (1) {
        printf("\nMenu:");
        printf("\n1. Insert an element");
        printf("\n2. Delete an element");
        printf("\n3. Display the elements");
        printf("\n4. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter the element to insert: ");
                scanf("%d", &element);
                insert(element);
                break;
            case 2:
                printf("\nEnter the element to delete: ");
                scanf("%d", &element);
                delete(element);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void insert(int element) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("\nMemory allocation failed. Insertion failed.");
        return;
    }
    newNode->data = element;
    newNode->prev = NULL;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }

    printf("\nElement %d inserted successfully.", element);
}

void delete(int element) {
    if (head == NULL) {
        printf("\nDoubly linked list is empty. Deletion failed.");
        return;
    }

    Node *temp = head;

    while (temp != NULL && temp->data != element) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("\nElement %d not found in the doubly linked list. Deletion failed.", element);
        return;
    }

    if (temp == head) {
        head = temp->next;
        if (head != NULL)
            head->prev = NULL;
    } else {
        temp->prev->next = temp->next;
        if (temp->next != NULL)
            temp->next->prev = temp->prev;
    }

    free(temp);
    printf("\nElement %d deleted successfully.", element);
}

void display() {
    if (head == NULL) {
        printf("\nDoubly linked list is empty.");
        return;
    }

    printf("\nElements in the doubly linked list: ");
    Node *temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
}

circular
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

typedef struct Node Node;

Node *head = NULL; // Initially, the circular linked list is empty

void insert(int);
void delete(int);
void display();

int main() {
    int choice, element;

    while (1) {
        printf("\nMenu:");
        printf("\n1. Insert an element");
        printf("\n2. Delete an element");
        printf("\n3. Display the elements");
        printf("\n4. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter the element to insert: ");
                scanf("%d", &element);
                insert(element);
                break;
            case 2:
                printf("\nEnter the element to delete: ");
                scanf("%d", &element);
                delete(element);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void insert(int element) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("\nMemory allocation failed. Insertion failed.");
        return;
    }
    newNode->data = element;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        Node *temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }

    printf("\nElement %d inserted successfully.", element);
}

void delete(int element) {
    if (head == NULL) {
        printf("\nCircular linked list is empty. Deletion failed.");
        return;
    }

    Node *temp = head, *prev = NULL;

    do {
        if (temp->data == element) {
            if (temp == head) {
                while (temp->next != head) {
                    temp = temp->next;
                }
                if (head == head->next) { // Only one element in the circular linked list
                    free(temp);
                    head = NULL;
                } else {
                    Node *temp2 = head;
                    head = head->next;
                    temp->next = head;
                    free(temp2);
                }
            } else {
                prev->next = temp->next;
                free(temp);
            }
            printf("\nElement %d deleted successfully.", element);
            return;
        }
        prev = temp;
        temp = temp->next;
    } while (temp != head);

    printf("\nElement %d not found in the circular linked list. Deletion failed.", element);
}

void display() {
    if (head == NULL) {
        printf("\nCircular linked list is empty.");
        return;
    }

    printf("\nElements in the circular linked list: ");
    Node *temp = head;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
}
