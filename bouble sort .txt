bouble sort 

#include <stdio.h>
#include <stdlib.h>

void bubbleSort(int arr[], int n);
void displayArray(int arr[], int n);

int main() {
    int choice, n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    while (1) {
        printf("\nMenu:");
        printf("\n1. Sort the array using Bubble Sort");
        printf("\n2. Display the sorted array");
        printf("\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                bubbleSort(arr, n);
                printf("\nArray sorted successfully using Bubble Sort.");
                break;
            case 2:
                printf("\nSorted Array:\n");
                displayArray(arr, n);
                break;
            case 3:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void displayArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

selection sort

#include <stdio.h>
#include <stdlib.h>

void selectionSort(int arr[], int n);
void displayArray(int arr[], int n);

int main() {
    int choice, n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    while (1) {
        printf("\nMenu:");
        printf("\n1. Sort the array using Selection Sort");
        printf("\n2. Display the sorted array");
        printf("\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                selectionSort(arr, n);
                printf("\nArray sorted successfully using Selection Sort.");
                break;
            case 2:
                printf("\nSorted Array:\n");
                displayArray(arr, n);
                break;
            case 3:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void selectionSort(int arr[], int n) {
    int i, j, minIndex, temp;
    for (i = 0; i < n - 1; i++) {
        minIndex = i;
        for (j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Swap elements
        temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}

void displayArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

insertion

#include <stdio.h>
#include <stdlib.h>

void insertionSort(int arr[], int n);
void displayArray(int arr[], int n);

int main() {
    int choice, n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    while (1) {
        printf("\nMenu:");
        printf("\n1. Sort the array using Insertion Sort");
        printf("\n2. Display the sorted array");
        printf("\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insertionSort(arr, n);
                printf("\nArray sorted successfully using Insertion Sort.");
                break;
            case 2:
                printf("\nSorted Array:\n");
                displayArray(arr, n);
                break;
            case 3:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void insertionSort(int arr[], int n) {
    int i, j, key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void displayArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}
