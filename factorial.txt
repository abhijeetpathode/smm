factorial

#include<stdio.h>
int fact(int n)
{
if(n==0)
{
retrun 1;
}
else
{ retrun(n*fact(n-1)
}
void main()
{ 
int num,f;
printf("eneter any no");
scanf("%d",num);
f=fact(num);
printf("the factorial od %d is %d ",num,f);

stak

#include <stdio.h>  
#include <stdlib.h>  
#define SIZE 4  
int top = -1, inp_array[SIZE];  
void push();  
void pop();  
void show();  
void displayTop(); // Function to display the top element without popping  
int main()  
{  
    int choice;  
    while (1)  
    {  
        printf("\nPerform operations on the stack:");  
        printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.Display Top\n5.End");  // Extended menu with display top option
        printf("\n\nEnter the choice: ");  
        scanf("%d", &choice);  
        switch (choice)  
        {  
        case 1:  
            push();  
            break;  
        case 2:  
            pop();  
            break;  
        case 3:  
            show();  
            break;  
        case 4:  
            displayTop(); // Call the new function for displaying top element  
            break;
        case 5:  
            exit(0);  
        default:  
            printf("\nInvalid choice!!");  
        }  
    }  
}  

void push()  
{  
    int x;  
    if (top == SIZE - 1)  
    {  
        printf("\nOverflow!!");  
    }  
    else  
    {  
        printf("\nEnter the element to be added onto the stack: ");  
        scanf("%d", &x);  
        top = top + 1;  
        inp_array[top] = x;  
    }  
}  

void pop()  
{  
    if (top == -1)  
    {  
        printf("\nUnderflow!!");  
    }  
    else  
    {  
        printf("\nPopped element: %d", inp_array[top]);  
        top = top - 1;  
    }  
}  

void show()  
{  
    if (top == -1)  
    {  
        printf("\nUnderflow!!");  
    }  
    else  
    {  
        printf("\nElements present in the stack: \n");  
        for (int i = top; i >= 0; --i)  
            printf("%d\n", inp_array[i]);  
    }  
}  

void displayTop()  
{  
    if (top == -1)  
    {  
        printf("\nUnderflow!!");  
    }  
    else  
    {  
        printf("\nTop element of the stack: %d\n", inp_array[top]);  
    }  
}

queue

#include <stdio.h>
#include <stdlib.h>

#define SIZE 5 // Maximum size of the queue

int queue[SIZE];
int front = -1, rear = -1;

void push(int);
int pop();
void display();

int main() {
    int choice, element;

    while (1) {
        printf("\nQueue Operations:");
        printf("\n1. Push");
        printf("\n2. Pop");
        printf("\n3. Display");
        printf("\n4. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter the element to push: ");
                scanf("%d", &element);
                push(element);
                break;
            case 2:
                element = pop();
                if (element != -1)
                    printf("\nPopped element: %d", element);
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    }

    return 0;
}

void push(int element) {
    if (rear == SIZE - 1) {
        printf("\nQueue Overflow! Cannot push element.");
    } else {
        if (front == -1)
            front = 0;
        rear++;
        queue[rear] = element;
        printf("\n%d pushed into the queue.", element);
    }
}

int pop() {
    int element;
    if (front == -1 || front > rear) {
        printf("\nQueue Underflow! Cannot pop element.");
        return -1;
    } else {
        element = queue[front];
        front++;
        if (front > rear)
            front = rear = -1; // Reset queue when empty
        return element;
    }
}

void display() {
    if (front == -1 || front > rear) {
        printf("\nQueue is empty.");
    } else {
        printf("\nQueue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
    }
}


